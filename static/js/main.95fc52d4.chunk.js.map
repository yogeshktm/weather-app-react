{"version":3,"sources":["components/WeatherCard/index.js","components/SearchBox/index.js","container/WeatherCardContainer/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","city","temperature","temperatureMin","temperatureMax","weather","icon","country","countryImage","react_default","a","createElement","className","src","alt","React","Component","SearchBox","onSubmit","handleSubmit","autoFocus","type","id","autoComplete","onChange","handleChange","placeholder","WeatherCardContainer","_this","call","e","preventDefault","endPoint","state","searchKey","console","log","axios","get","then","response","iconUrl","data","countryImgUrl","sys","setState","notFound","weatherCity","name","main","temp","temp_min","temp_max","catch","error","bind","assertThisInitialized","_this2","url","target","Fragment","SearchBox_SearchBox","notfound","WeatherCard_WeatherCard","Header","Footer","App","Header_Header","WeatherCardContainer_WeatherCardContainer","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95fc52d4.chunk.js","sourcesContent":["import React from 'react';\n\nexport class WeatherCard extends React.Component{\n  render(){\n    const {city,temperature,temperatureMin,temperatureMax,weather,icon,country,countryImage} = this.props;\n    return(\n      <div className=\"weather-card\">\n        <h3><img className=\"flag\" src={countryImage} alt={country}/>{city} - {country}</h3>\n        <p>Temp:{temperature}<sup>&deg;c</sup> Min:{temperatureMin}<sup>&deg;c</sup> Max:{temperatureMax}<sup>&deg;c</sup></p>\n        <p className=\"weather-info\"><img className=\"weather-icon\" src={icon} alt={weather}/>{weather}</p>\n      </div>\n    )\n  }\n}","import React from 'react';\n\nexport class SearchBox extends React.Component{\n  render(){\n    return(\n      <form onSubmit={this.props.handleSubmit} className=\"search-box\">\n        <input autoFocus className=\"search\" type=\"search\" id=\"search\" autoComplete=\"off\" onChange={this.props.handleChange} placeholder=\"Search\"/>\n        <button className=\"btn\" type=\"submit\">Search</button>\n      </form>\n    )\n  }\n}","import React from 'react';\nimport axios from 'axios';\nimport { WeatherCard } from '../../components/WeatherCard';\nimport { SearchBox } from '../../components/SearchBox';\n\n\nexport class WeatherCardContainer extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      weatherCity : \"\",\n      temperature: \"\",\n      temperatureMin:\"\",\n      temperatureMax : \"\",\n      weather : \"\",\n      searchKey : \"\",\n      notFound : false,\n      icon:\"\",\n      country : \"\"\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount(){\n    // const cityId = 1264527;\n    const cityName = \"Chennai\";\n    const apiKey = \"199f16089a6c8e553e0ba2ef4dbd67d3\";\n    //let url = \"http://api.openweathermap.org/data/2.5/forecast?id=\";\n    //let url = \"http://api.openweathermap.org/data/2.5/weather?id=\";\n    let url = \"http://api.openweathermap.org/data/2.5/weather?q=\"\n    let units = \"metric\";\n    const endPoint = url + cityName + '&APPID=' + apiKey + '&units=' + units;\n    axios.get(endPoint)\n    .then((response) => {\n      console.log(response)\n      const iconUrl = \"http://openweathermap.org/img/w/\" + response.data.weather[0].icon + '.png';\n      const countryImgUrl = \"https://www.countryflags.io/\" + response.data.sys.country + \"/flat/24.png\";\n      this.setState({\n        notFound : false,\n        weatherCity : response.data.name,\n        temperature : response.data.main.temp,\n        temperatureMin : response.data.main.temp_min,\n        temperatureMax : response.data.main.temp_max,\n        weather : response.data.weather[0].main,\n        country: response.data.sys.country,\n        icon : iconUrl,\n        countryImage : countryImgUrl\n      })\n    })\n   .catch((error)=>{\n      console.log(error);\n   });\n  }\n  componentDidUpdate(){\n    \n  }\n  handleSubmit = (e) =>{\n    e.preventDefault();\n    const cityName = this.state.searchKey;\n    const apiKey = \"199f16089a6c8e553e0ba2ef4dbd67d3\";\n    //let url = \"http://api.openweathermap.org/data/2.5/forecast?id=\";\n    //let url = \"http://api.openweathermap.org/data/2.5/weather?id=\";\n    let url = \"http://api.openweathermap.org/data/2.5/weather?q=\"\n    let units = \"metric\";\n    const endPoint = url + cityName + '&APPID=' + apiKey + '&units=' + units;\n    console.log(endPoint);\n    axios.get(endPoint)\n    .then((response) => {\n        const iconUrl = \"http://openweathermap.org/img/w/\" + response.data.weather[0].icon + '.png';\n        const countryImgUrl = \"https://www.countryflags.io/\" + response.data.sys.country + \"/flat/24.png\";\n        this.setState({\n          notFound : false,\n          weatherCity : response.data.name,\n          temperature : response.data.main.temp,\n          temperatureMin : response.data.main.temp_min,\n          temperatureMax : response.data.main.temp_max,\n          weather : response.data.weather[0].main,\n          country: response.data.sys.country,\n          countryImage : countryImgUrl,\n          icon : iconUrl,\n        })\n    })\n   .catch((error)=>{\n      this.setState({\n        notFound : true\n      })\n   });\n  }\n  handleChange(e){\n    this.setState({searchKey:e.target.value})\n  }\n  render(){\n    return(\n      <>\n        <SearchBox handleChange={this.handleChange} handleSubmit={this.handleSubmit}/>\n        {!this.state.notFound ?  \n          <WeatherCard \n            city={this.state.weatherCity} \n            temperature={this.state.temperature} \n            temperatureMin = {this.state.temperatureMin} \n            temperatureMax={this.state.temperatureMax} \n            weather={this.state.weather}\n            icon={this.state.icon}\n            country={this.state.country}\n            countryImage={this.state.countryImage}/>\n            : <p className={!this.state.notfound ? \"not-found-msg shake\" : \"not-found-msg\"}>City not found</p>\n          }\n      </>\n    )\n  }\n}","import React from 'react';\n\nexport class Header extends React.Component{\n  render(){\n    return(\n      <header>\n        <h1><i>W</i>eather <i>F</i>inder</h1>\n      </header>\n    )\n  }\n}","import React from 'react';\n\nexport class Footer extends React.Component{\n  render(){\n    return(\n      <footer>\n        <p>Made with ♥ in React : yogesh</p>\n      </footer>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { WeatherCardContainer } from './container/WeatherCardContainer';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Header/>\n          <WeatherCardContainer/>\n          <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}